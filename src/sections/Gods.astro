---
import { GODS } from "../data/godsData";
---

<section id="gods" class="relative overflow-x-hidden">
    <div class="flex relative" id="gods-container">
        {
            GODS.map(({ id, name, slogan, bio, category, combat_type, pantheon, type, abilities, color }) => {
                return (
                    <section
                        class="w-full flex flex-shrink-0 flex-col px-5 pb-6 pt-[38%] lg:py-28 lg:px-24 bg-cover god-container"
                        style={`background-image: url(/img/${id}/${id}.webp)`}
                    >
                        <div>
                            <div class="flex flex-col sm:w-[70%] lg:w-[65%] 2xl:w-[45%]">
                                <h4 class="font-oswald uppercase text-white/75 text-lg sm:text-xl lg:text-[24px]">{slogan}</h4>
                                <h2 class="font-oswald uppercase text-6xl sm:text-[80px] lg:text-[80px] sm:leading-[70px]  lg:leading-[110px]">
                                    {name}
                                </h2>
                                <p class="font-montserrat text-sm sm:text-base lg:text-lg text-white/90 mt-4 sm:mt-2 mb-8">{bio}</p>
                                <div class="flex gap-8 items-center text-center uppercase text-xl text-white/75">
                                    <div class="flex flex-col gap-3 justify-between items-center">
                                        <img class="max-w-[50px] sm:max-w-[60px]" src={`/img/${category}.png`} alt={`${category} icon`} />
                                        <span>{category}</span>
                                    </div>
                                    <div class="flex flex-col gap-3 justify-between items-center">
                                        <img
                                            class="max-w-[50px] sm:max-w-[60px]"
                                            src={`/img/${combat_type}.png`}
                                            alt={`${combat_type} icon`}
                                        />
                                        <span>{combat_type}</span>
                                    </div>
                                    <div class="flex flex-col gap-3 justify-between items-center">
                                        <img class="max-w-[50px] sm:max-w-[60px]" src={`/img/${pantheon}.png`} alt={`${pantheon} icon`} />
                                        <span>{pantheon}</span>
                                    </div>
                                    <div class="flex flex-col gap-3 justify-between items-center">
                                        <img class="max-w-[50px] sm:max-w-[60px]" src={`/img/${type}.png`} alt={`${type} icon`} />
                                        <span>{type}</span>
                                    </div>
                                </div>
                            </div>
                            <div class="flex justify-between mt-[40px] items-end">
                                <div class="sm:w-[70%] lg:w-[65%] 2xl:w-[45%]">
                                    <h3 class="font-oswald uppercase text-[32px] text-white/75 mb-5 ">Abilities</h3>
                                    <nav>
                                        <div class="flex gap-4 sm:gap-8 bg-black/50">
                                            {abilities.map(({ id: abilityId, name: abilityName }, index) => {
                                                return (
                                                    <li class={`${index === 0 ? "bg-black" : ""} cursor-pointer`} id="ability-selector">
                                                        <div
                                                            class={`border-2 p-[10px] sm:p-[15px] ability-icon transition-all duration-300`}
                                                            style={{
                                                                borderColor: `${index === 0 ? `${color}` : "transparent"}`,
                                                                borderBottomColor: `${index === 0 ? `black` : "transparent"}`,
                                                            }}
                                                            id="ability-icon"
                                                        >
                                                            <img src={`/img/${id}/${abilityId}.webp`} alt={abilityName} />
                                                        </div>
                                                    </li>
                                                );
                                            })}
                                        </div>
                                        <div class="sm:mb-0 ability-description">
                                            {abilities.map(({ type, description, specs, name: abilityName }, index) => {
                                                // const firstAbilityIndex = index % 5 === 0;

                                                return (
                                                    <li
                                                        id="ability-description"
                                                        class={`${index === 0 ? "active" : "hidden"} p-[15px] bg-black/50 border-2 border-solid mt-[-2px]`}
                                                        style={{ borderColor: `${color}` }}
                                                    >
                                                        <div class="flex gap-2 items-center">
                                                            <span class="uppercase text-white/60 text-xl">{type}</span>
                                                            <span class="w-1 h-[2px] bg-white/60" />
                                                            <span class="uppercase font-bold text-xl">{abilityName}</span>
                                                        </div>
                                                        <p class="font-montserrat mt-2">{description}</p>
                                                        <div class="mt-5 specs">
                                                            {specs
                                                                ? Object.keys(specs).map((keyName, i) => {
                                                                      return (
                                                                          <div class="font-montserrat mt-2">
                                                                              <span class="font-bold">{keyName}</span>:{" "}
                                                                              <span class="text-white/70">{specs[keyName]}</span>
                                                                          </div>
                                                                      );
                                                                  })
                                                                : ""}
                                                        </div>
                                                    </li>
                                                );
                                            })}
                                        </div>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </section>
                );
            })
        }
    </div>
    <div class="absolute god-selector-container text-center">
        <div class={`flex sm:flex-col gap-8 bg-black/70 p-4 pb-[8px] sm:p-[24px] sm:pb-[14px] border-2 border-white/70`}>
            {
                GODS.map(({ id, name }, index) => {
                    return (
                        <div class="flex flex-col items-center gap-2">
                            <div id="god-selector" class="cursor-pointer">
                                <img
                                    class="grayscale border mb-1 sm:max-w-[100px] lg:w-full"
                                    src={`/img/${id}/${id}_icon.webp`}
                                    alt={`${name} Icon`}
                                />
                                <span class="text-base sm:text-xl">{name}</span>
                            </div>
                        </div>
                    );
                })
            }
        </div>
    </div>
</section>

<style>
    section {
        position: relative;
        z-index: 1;
    }
    section::before {
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        inset: 0;
        background: linear-gradient(90deg, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0.5) 65%, rgba(0, 0, 0, 0) 100%);
        z-index: -1;
    }
    li {
        list-style: none;
        z-index: 99;
    }
    .ability-icon {
        z-index: 99;
        position: relative;
    }
    .ability-description {
        z-index: 0;
        position: relative;
    }
    #gods-container {
        transition: transform 0.5s ease;
    }
    .god-selector-container {
        top: 200px;
        right: 4.5%;
        z-index: 1;
    }
    .grayscale {
        filter: grayscale(100%);
        transition: filter 0.3s ease;
    }
    .grayscale:hover {
        filter: grayscale(50%);
    }

    .active {
        filter: grayscale(0);
    }
    @media screen and (max-width: 1024px) {
        .god-selector-container {
            top: 100px;
        }
    }
    @media screen and (max-width: 640px) {
        .god-selector-container {
            top: 10px;
            right: 0;
            padding: 20px 1.25rem;
            height: min-content;
        }
        .god-container {
            background-size: cover;
            background-position: -1000px center;
            background-repeat: no-repeat;
        }
    }
</style>

<script>
    import { GODS } from "../data/godsData";

    document.addEventListener("DOMContentLoaded", () => {
        const godsContainer = document.querySelector("#gods-container") as HTMLElement;
        const godSelectors = document.querySelectorAll("#god-selector");
        const abilitySelector = document.querySelectorAll("#ability-selector");
        const abilityDescription = document.querySelectorAll("#ability-description");
        let selectedGod = 0;

        if (godSelectors.length > 0) {
            const firstGod = godSelectors[0].querySelector("img");
            if (firstGod) {
                firstGod.classList.add("active");
            }
        }

        godSelectors.forEach((selector, index) => {
            selector.addEventListener("click", () => {
                if (godsContainer) {
                    godsContainer.style.transform = `translateX(-${index * 100}%)`;

                    godSelectors.forEach((s) => {
                        s.querySelector("img")?.classList.add("grayscale");
                        s.querySelector("img")?.classList.remove("active");
                    });

                    selector.querySelector("img")?.classList.remove("grayscale");
                    selector.querySelector("img")?.classList.add("active");
                }

                selectedGod = index;

                abilityDescription.forEach((desc, index) => {
                    const firstAbilityIndex = index % 5 === 0;

                    desc.classList.remove("active");
                    desc.classList.add("hidden");
                    if (firstAbilityIndex) {
                        desc.classList.add("active");
                        desc.classList.remove("hidden");
                    }
                });

                abilityDescription[5 * selectedGod].classList.add("active");
                abilityDescription[5 * selectedGod].classList.remove("hidden");

                abilitySelector.forEach((a) => {
                    const element = a.firstElementChild as HTMLElement;
                    a.classList.remove("bg-black");
                    element.style.borderColor = "transparent";
                    element.style.borderBottomColor = "transparent";
                });

                const abilityDiv = abilitySelector[5 * selectedGod].firstElementChild as HTMLElement;
                abilityDiv.style.borderColor = GODS[selectedGod].color;
                abilityDiv.style.borderBottomColor = "black";
                abilitySelector[5 * selectedGod].classList.add("bg-black");
            });
        });

        let color = "";
        abilitySelector.forEach((ability, index) => {
            if (index === 0) {
                const element = ability.firstElementChild as HTMLElement;
                const computedStyle = window.getComputedStyle(element);
                color = computedStyle.getPropertyValue("border-color");
            }
            ability.addEventListener("click", () => {
                const abilityDiv = ability.firstElementChild as HTMLElement;

                if (!ability.classList.contains("bg-black")) {
                    abilitySelector.forEach((a) => {
                        const element = a.firstElementChild as HTMLElement;
                        a.classList.remove("bg-black");
                        element.style.borderColor = "transparent";
                        element.style.borderBottomColor = "transparent";
                    });

                    abilityDescription.forEach((desc, indexNew) => {
                        if (indexNew < selectedGod * 5 + 5) {
                            desc.classList.remove("active");
                            desc.classList.add("hidden");
                        }
                    });

                    abilityDescription[index].classList.add("active");
                    abilityDescription[index].classList.remove("hidden");

                    abilityDiv.style.borderColor = GODS[selectedGod].color;
                    abilityDiv.style.borderBottomColor = "black";
                    ability.classList.add("bg-black");
                }
            });
        });
    });
</script>
